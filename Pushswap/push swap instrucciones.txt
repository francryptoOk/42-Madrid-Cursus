# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    push swap instrucciones.txt                        :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: fsantill <fsantill@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/01/18 16:32:54 by frsantil          #+#    #+#              #
#    Updated: 2024/01/23 11:18:34 by fsantill         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

// ARRAY = FUNCION PARA UNIR LOS DOS TIPOS DE ARGUMENTOS EJ:
//(./Push_swap "1 3 5" 2 -7 -67) = STRJOIN CON ESTEROIDES
// MATRIZ = SPLIT (ARRAY ' ')
// MATRIX[1] = 1
// MATRIX[2] = 3
// MATRIX[3] = 5
// ETC
// FUNCION PARA COMPROBAR SI ESTAS ORDENADOS (CHAR **MATRIZ)
// 	{
// 		while(matriz)
// 			if (matriz[i] < matriz[i + 1])
// 				i++;
// 			else 
// 				return (1);
// 	}
// FUNCION PARA REVISAR LA MATRIZ, Y SU CONTENIDO(CHAR **MATRIZ, T_STACK LST_A)
// 		{
// 		FUNCION PARA REVISAR SINTAXIS (MATRIZ[1])
// 		}

// Tomar los argumentos
// Strjoin de argv, para guardar todos los numeros
// char **matriz = ft_split(strjoin(argv))
// ft_create_list (matriz)
//
// create list (funcion)
// nbr = ft_atol(matrix[i])
// si nbr (llamar a ft_is_digit)
//exit
// si nbr esta dentro de los rangos int_max  e int_min (limits.h)
//exit
//	stack_add(nbr, stack_a)
//
//
//	dentro de stack_add
//	crear el nodo, añadir el valor al nodo
//	ponerlo al final de nuestra lista
//
//	interamos la i
//	mmatriz[i = 1]
//
//	volvemos al main 
//	comprobar si nuestra lista ya esta ordenada
//	si lo esta, entonces
//exit
//
//	sino 
// if argc == 2
// swap_a
//
// sino
// si argc == 3
// ft_pequeño_stack_3
//
// asi sucesivamente hasta el numero 5
// y si argc > 5
// ft_push swap
// algortimo de  ordenacion
//
// como funciona RADIX
//
// 300
// 311
// 368
//   6
//   2
//   9
//
//  ordenara primero la posicion por las unidades
//
// 300
// 311
//   2
//   6
// 368
//   9
//
//  ordena decenas
//
// 300
//   2
//   6
//   9
// 311
// 368
